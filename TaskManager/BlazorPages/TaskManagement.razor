@* @page "/taskmanagement"
@using System.Net.Http
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components.Forms
@inject HttpClient Http

<h3 class="text-2xl font-bold text-center mb-6 text-blue-700">Task Manager</h3>

@if (tasks == null)
{
    <p class="text-center">Loading tasks...</p>
}
else
{
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        @foreach (var task in tasks)
        {
            <div class="bg-white p-4 rounded-lg shadow-md hover:shadow-lg transition-shadow">
                <h4 class="text-lg font-semibold">@task.Title</h4>
                <p class="text-gray-600 mt-2 border-l-4 border-dotted border-gray-300 pl-3">
                    @task.Description
                </p>
                <p class="text-sm text-gray-500 mt-1">
                    Created: @task.CreatedAt.ToString("dd/MM/yyyy") | 
                    @(task.IsCompleted ? $"Completed: {task.CompletedAt?.ToString("dd/MM/yyyy")}" : "Not Completed")
                </p>
            </div>
        }
    </div>
}

<div class="mt-6">
    <h4 class="text-xl font-semibold mb-4">Add New Task</h4>
    <div class="bg-gray-100 p-4 rounded-lg">
        <EditForm Model="@newTask" OnValidSubmit="CreateTask">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-4">
                <label class="block text-sm font-medium text-gray-700">Title</label>
                <InputText @bind-Value="newTask.Title" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm" />
            </div>
            <div class="mb-4">
                <label class="block text-sm font-medium text-gray-700">Description</label>
                <InputTextArea @bind-Value="newTask.Description" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm" rows="3" />
            </div>
            <div class="mb-4">
                <button type="submit" class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700">Add Task</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private List<ToDoTaskDto> tasks;
    private ToDoTaskDto newTask = new ToDoTaskDto();

    protected override async Task OnInitializedAsync()
    {
        await LoadTasks();
    }

    private async Task LoadTasks()
    {
        tasks = await Http.GetFromJsonAsync<List<ToDoTaskDto>>("api/ToDoTask");
    }

    private async Task CreateTask()
    {
        var response = await Http.PostAsJsonAsync("api/ToDoTask", newTask);
        if (response.IsSuccessStatusCode)
        {
            newTask = new ToDoTaskDto(); // Reset form
            await LoadTasks();
        }
    }

    public class ToDoTaskDto
    {
        public int Id { get; set; }
        public string Title { get; set; }
        public string Description { get; set; }
        public DateTime CreatedAt { get; set; } = DateTime.Now;
        public bool IsCompleted { get; set; }
        public DateTime? CompletedAt { get; set; }
    }
} *@